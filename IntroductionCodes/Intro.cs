using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using UnityEngine.InputSystem; // Import the new Input System

public class Intro : MonoBehaviour
{
    public Texture2D[] images; // Array to hold your images
    private int currentIndex = 0;
    private PlayerActionMap inputActions; // Input Actions class generated by the Input System
    private RawImage rawImage; // Reference to the RawImage component
    private bool inputProcessed = false;

    private void Awake()
    {
        // Instantiate the input actions
        inputActions = new PlayerActionMap();
    }

    private void OnEnable()
    {
        // Enable the click input action and subscribe to the performed event
        inputActions.Enable();
        inputActions.UI.Click.performed += OnInputClick;
    }

    private void OnDisable()
    {
        // Unsubscribe from the click event and disable input actions
        inputActions.UI.Click.performed -= OnInputClick;
        inputActions.Disable();
    }

    private void Start()
    {
        // Create an empty GameObject with a RawImage component
        GameObject imageObject = new GameObject("ImageDisplay");
        imageObject.transform.SetParent(transform, false); // Set the canvas as parent

        // Configure the RectTransform
        RectTransform rectTransform = imageObject.AddComponent<RectTransform>();
        rectTransform.anchorMin = Vector2.zero;
        rectTransform.anchorMax = Vector2.one;
        rectTransform.sizeDelta = Vector2.zero;
        rectTransform.anchoredPosition = Vector2.zero;

        // Add and configure RawImage
        rawImage = imageObject.AddComponent<RawImage>();
        rawImage.texture = images[currentIndex]; // Show the first image at the start
    }

    // This method is called whenever a click or touch is detected
    private void OnInputClick(InputAction.CallbackContext context)
    {
        if (inputProcessed) return; // Prevent multiple input detections
        inputProcessed = true;
        
        // Only proceed if the current index is less than the last image
        if (currentIndex < images.Length - 1)
        {
            currentIndex++;
            ShowImage(currentIndex);
            //Debug.Log($"Image {currentIndex + 1} displayed.");
        }
        else
        {
            // End of visual novel, load the next scene
            //Debug.Log("End of visual novel.");
            
            if (SceneManager.GetActiveScene() == SceneManager.GetSceneByName("Introduction"))
            {
                SceneManager.LoadScene("Tutorial", LoadSceneMode.Single);
            }
            else if (SceneManager.GetActiveScene() == SceneManager.GetSceneByName("Ending"))
            {
                SceneManager.LoadScene("MainMenu", LoadSceneMode.Single);
            }
        }
        
        StartCoroutine(ResetInputProcessed());
    }

    private void ShowImage(int index)
    {
        // Update the texture of the existing RawImage
        rawImage.texture = images[index];
    }
    
    private IEnumerator ResetInputProcessed()
    {
        yield return new WaitForSeconds(2f);
        inputProcessed = false;
    }
}